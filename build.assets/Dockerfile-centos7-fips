FROM centos:7 AS libbpf

# Install required dependencies.
RUN yum groupinstall -y 'Development Tools' && \
    yum install -y epel-release && \
    yum update -y && \
    yum -y install centos-release-scl-rh && \
    yum install -y \
    # required by libbpf
    centos-release-scl \
    # required by libbpf
    devtoolset-11-gcc* \
    # required by libbpf
    devtoolset-11-make \
    # required by libbpf
    elfutils-libelf-devel-static \
    git \
    # required by libbpf
    scl-utils \
    yum clean all

# Install libbpf - compile with a newer GCC. The one installed by default is not able to compile it.
# BUILD_STATIC_ONLY disables libbpf.so build as we don't need it.
ARG LIBBPF_VERSION
RUN mkdir -p /opt && cd /opt && \
    curl -L https://github.com/gravitational/libbpf/archive/refs/tags/v${LIBBPF_VERSION}.tar.gz | tar xz && \
    cd /opt/libbpf-${LIBBPF_VERSION}/src && \
    scl enable devtoolset-11 "make && BUILD_STATIC_ONLY=y DESTDIR=/opt/libbpf make install"

FROM centos:7

ENV LANGUAGE=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    LC_CTYPE=en_US.UTF-8

ARG UID
ARG GID
RUN (groupadd ci --gid=$GID -o && useradd ci --uid=$UID --gid=$GID --create-home --shell=/bin/sh && \
     mkdir -p -m0700 /var/lib/teleport && chown -R ci /var/lib/teleport)

RUN yum groupinstall -y 'Development Tools' && \
    yum install -y epel-release && \
    yum update -y && \
    yum -y install centos-release-scl-rh && \
    yum install -y \
    #required by libbpf
    centos-release-scl \
    cmake3 \
    # required by libbpf
    devtoolset-11-* \
    # required by libbpf
    elfutils-libelf-devel-static \
    git \
    net-tools \
    ninja-build \
    llvm-toolset-7.0 \
    # required by Teleport PAM support
    pam-devel \
    perl-IPC-Cmd \
    tree \
    # used by our Makefile
    which \
    zip \
    # required by libbpf
    zlib-static && \
    yum clean all

# Install etcd.
RUN (curl -L https://github.com/coreos/etcd/releases/download/v3.3.9/etcd-v3.3.9-linux-amd64.tar.gz | tar -xz && \
     cp etcd-v3.3.9-linux-amd64/etcd* /bin/)

# Install Go.
ARG GOLANG_VERSION
RUN mkdir -p /opt && cd /opt && curl https://storage.googleapis.com/golang/$GOLANG_VERSION.linux-amd64.tar.gz | tar xz && \
    mkdir -p /go/src/github.com/gravitational/teleport && \
    chmod a+w /go && \
    chmod a+w /var/lib && \
    chmod a-w /
ENV GOEXPERIMENT=boringcrypto \
    GOPATH="/go" \
    GOROOT="/opt/go" \
    PATH="/opt/llvm/bin:$PATH:/opt/go/bin:/go/bin:/go/src/github.com/gravitational/teleport/build"

# Install Rust
ARG RUST_VERSION
ENV RUSTUP_HOME=/usr/local/rustup \
     CARGO_HOME=/usr/local/cargo \
     PATH=/usr/local/cargo/bin:$PATH \
     RUST_VERSION=$RUST_VERSION

RUN mkdir -p $RUSTUP_HOME && chmod a+w $RUSTUP_HOME && \
    mkdir -p $CARGO_HOME/registry && chmod -R a+w $CARGO_HOME

# Install Rust using the ci user, as that is the user that
# will run builds using the Rust toolchains we install here.
# Cross-compilation targets are only installed on amd64, as
# this image doesn't contain gcc-multilib.
USER ci
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain $RUST_VERSION && \
    rustup --version && \
    cargo --version && \
    rustc --version && \
    rustup component add rustfmt clippy && \
    if [ "$BUILDARCH" = "amd64" ]; then rustup target add aarch64-unknown-linux-gnu; fi

ARG LLVM_VERSION=7.0.1
RUN mkdir -p /opt && cd /opt && curl -L https://releases.llvm.org/7.0.1/clang+llvm-$LLVM_VERSION-x86_64-linux-gnu-ubuntu-18.04.tar.xz | tar xJ
ENV PATH="$PATH:/opt/clang+llvm-$LLVM_VERSION-x86_64-linux-gnu-ubuntu-18.04/bin"

RUN ln -s /usr/bin/cmake3 /usr/bin/cmake

# Build FIPS certified BoringSSL library
# https://csrc.nist.gov/projects/cryptographic-module-validation-program/certificate/3678
ARG BORINGSSL_VERSION=ae223d6138807a13006342edfeef32e813246b39
RUN mkdir -p /opt && cd /opt && \
    git clone https://github.com/google/boringssl.git && \
    cd boringssl && \
    git checkout $BORINGSSL_VERSION && \
    mkdir build && \
    cd build
    cmake -DCMAKE_C_COMPILER=clang -DFIPS=1 -DCMAKE_BUILD_TYPE=Release -GNinja .. && \
    ninja

# https://github.com/cloudflare/boring#support-for-pre-built-binaries
ENV BORING_BSSL_PATH=/opt/boringssl

# Install PAM module and policies for testing.
COPY pam/ /opt/pam_teleport/
RUN make -C /opt/pam_teleport install

RUN chmod a-w /

# Download pre-built CentOS 7 assets with clang needed to build BPF tools.
RUN cd / && curl -L https://s3.amazonaws.com/clientbuilds.gravitational.io/go/centos7-assets.tar.gz | tar -xz

# Copy libbpf into the final image.
COPY --from=libbpf /opt/libbpf/usr /usr

USER ci
VOLUME ["/go/src/github.com/gravitational/teleport"]
EXPOSE 6600 2379 2380
